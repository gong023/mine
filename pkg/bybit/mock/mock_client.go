// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/bybit/client.go

// Package mock_bybit is a generated GoMock package.
package mock_bybit

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	bybit "github.com/gong023/mine/pkg/bybit"
	reflect "reflect"
)

// MockClientType is a mock of ClientType interface
type MockClientType struct {
	ctrl     *gomock.Controller
	recorder *MockClientTypeMockRecorder
}

// MockClientTypeMockRecorder is the mock recorder for MockClientType
type MockClientTypeMockRecorder struct {
	mock *MockClientType
}

// NewMockClientType creates a new mock instance
func NewMockClientType(ctrl *gomock.Controller) *MockClientType {
	mock := &MockClientType{ctrl: ctrl}
	mock.recorder = &MockClientTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientType) EXPECT() *MockClientTypeMockRecorder {
	return m.recorder
}

// WalletBalance mocks base method
func (m *MockClientType) WalletBalance(ctx context.Context, req *bybit.WalletBalanceReq) (*bybit.WalletBalanceRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletBalance", ctx, req)
	ret0, _ := ret[0].(*bybit.WalletBalanceRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletBalance indicates an expected call of WalletBalance
func (mr *MockClientTypeMockRecorder) WalletBalance(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletBalance", reflect.TypeOf((*MockClientType)(nil).WalletBalance), ctx, req)
}

// PositionList mocks base method
func (m *MockClientType) PositionList(ctx context.Context, req *bybit.PositionListReq) (*bybit.PositionListRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionList", ctx, req)
	ret0, _ := ret[0].(*bybit.PositionListRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionList indicates an expected call of PositionList
func (mr *MockClientTypeMockRecorder) PositionList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionList", reflect.TypeOf((*MockClientType)(nil).PositionList), ctx, req)
}

// OrderCreate mocks base method
func (m *MockClientType) OrderCreate(ctx context.Context, req *bybit.OrderCreateReq) (*bybit.OrderCreateRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreate", ctx, req)
	ret0, _ := ret[0].(*bybit.OrderCreateRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderCreate indicates an expected call of OrderCreate
func (mr *MockClientTypeMockRecorder) OrderCreate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreate", reflect.TypeOf((*MockClientType)(nil).OrderCreate), ctx, req)
}

// OrderCancel mocks base method
func (m *MockClientType) OrderCancel(ctx context.Context, req *bybit.OrderCancelReq) (*bybit.OrderCancelRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCancel", ctx, req)
	ret0, _ := ret[0].(*bybit.OrderCancelRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderCancel indicates an expected call of OrderCancel
func (mr *MockClientTypeMockRecorder) OrderCancel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCancel", reflect.TypeOf((*MockClientType)(nil).OrderCancel), ctx, req)
}

// PositionLeverageSave mocks base method
func (m *MockClientType) PositionLeverageSave(ctx context.Context, req *bybit.PositionLeverageSaveReq) (*bybit.PositionLeverageSaveRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionLeverageSave", ctx, req)
	ret0, _ := ret[0].(*bybit.PositionLeverageSaveRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionLeverageSave indicates an expected call of PositionLeverageSave
func (mr *MockClientTypeMockRecorder) PositionLeverageSave(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionLeverageSave", reflect.TypeOf((*MockClientType)(nil).PositionLeverageSave), ctx, req)
}
